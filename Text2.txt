1. When to use String vs. StringBuilder in C#?
String: Use String when you are working with a small number of string modifications or operations, as String is immutable. Each modification of a String creates a new object in memory, which can be inefficient if there are many operations.
StringBuilder: Use StringBuilder when you need to perform many string manipulations, like appending or inserting, as it is mutable. It allows for modifications without creating new objects, making it more efficient for large or frequent string operations.
2. What is the base class for all arrays in C#?
The base class for all arrays in C# is System.Array.

3. How do you sort an array in C#?
You can sort an array in C# using the Array.Sort() method. For example:
int[] numbers = { 5, 2, 8, 1, 3 };
Array.Sort(numbers);


4. What property of an array object can be used to get the total number of elements in an array?
The Length property of an array object is used to get the total number of elements in an array. For example:
int[] numbers = { 1, 2, 3, 4 };
int length = numbers.Length; // length will be 4

5. Can you store multiple data types in System.Array?
No, System.Array can only store elements of a single data type. However, you can use an array of object type, which allows storing different data types because everything in C# derives from object. For example:
object[] mixedArray = { 1, "hello", 3.14, true };


6. What’s the difference between the System.Array.CopyTo() and System.Array.Clone()?
CopyTo(): This method copies the elements of the current array to another existing array starting from a specified index. It requires the target array to have been initialized before copying.
In summary, CopyTo() copies to an existing array, while Clone() creates a new array.


03 Object-Oriented Programming

1. What are the six combinations of access modifier keywords and what do they do?
public: Accessible from anywhere in the program.
private: Accessible only within the same class or struct.
protected: Accessible within the same class and by derived classes.
internal: Accessible within the same assembly, but not from another assembly.
protected internal: Accessible within the same assembly and by derived classes in any assembly.
private protected: Accessible within the same class or derived classes, but only within the same assembly.
2. What is the difference between the static, const, and readonly keywords when applied to a type member?
static: The member belongs to the type itself, not to a specific instance. It can be accessed without creating an instance of the class.
const: The member is a compile-time constant. It is implicitly static and cannot be changed after it is assigned.
readonly: The member can only be assigned a value once, either when declared or in the constructor. It can be modified at runtime, unlike const.
3. What does a constructor do?
A constructor initializes an object when it is created. It is a method that has the same name as the class and is used to set default values or perform initialization.

4. Why is the partial keyword useful?
The partial keyword allows a class, struct, or interface to be defined in multiple files. It is useful for organizing large classes or auto-generated code into separate files.

5. What is a tuple?
A tuple is a data structure that allows you to store multiple values of different types in a single object. In C#, tuples can hold up to eight elements:
var person = (Name: "John", Age: 30);

6. What does the C# record keyword do?
The record keyword defines a reference type that provides built-in functionality for value-based equality, immutability, and concise syntax for data models.

7. What does overloading and overriding mean?
Overloading: Defining multiple methods with the same name but different parameters (either in number, type, or both).
Overriding: Providing a new implementation of a method inherited from a base class using the override keyword.
8. What is the difference between a field and a property?
Field: A variable directly declared in a class.
Property: A way to expose a field using get and set accessors, allowing more control over how values are accessed and modified.
9. How do you make a method parameter optional?
By providing a default value in the method declaration:
void MyMethod(int x = 10) { }


10. What is an interface and how is it different from an abstract class?
Interface: A contract that defines a set of methods and properties but does not provide implementation. A class can implement multiple interfaces.
Abstract Class: A class that can contain both fully implemented and abstract (non-implemented) methods. It can only be inherited from, not instantiated.
11. What accessibility level are members of an interface?
All members of an interface are public by default.

12. True/False: Polymorphism allows derived classes to provide different implementations of the same method.
True
13. True/False: The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True
14. True/False: The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True (It hides the base class method instead of overriding it.)
15. True/False: Abstract methods can be used in a normal (non-abstract) class.
False (Abstract methods can only exist in abstract classes.)
16. True/False: Normal (non-abstract) methods can be used in an abstract class.
True
17. True/False: Derived classes can override methods that were virtual in the base class.
True
18. True/False: Derived classes can override methods that were abstract in the base class.
True
19. True/False: In a derived class, you can override a method that was neither virtual nor abstract in the base class.
False (You can only override methods marked as virtual, abstract, or override.)
20. True/False: A class that implements an interface does not have to provide an implementation for all of the members of the interface.
False (It must provide implementations for all members.)
21. True/False: A class that implements an interface is allowed to have other members that aren’t defined in the interface.
True
22. True/False: A class can have more than one base class.
False (C# does not support multiple inheritance, but it can implement multiple interfaces.)
23. True/False: A class can implement more than one interface.
True